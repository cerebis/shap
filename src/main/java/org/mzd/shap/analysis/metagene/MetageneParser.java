/**
 *
 * Copyright 2010 Matthew Z DeMaere.
 * 
 * This file is part of SHAP.
 *
 * SHAP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * SHAP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SHAP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 */
package org.mzd.shap.analysis.metagene;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.mzd.shap.analysis.DetectorParser;
import org.mzd.shap.domain.Feature;
import org.mzd.shap.domain.Location;
import org.mzd.shap.domain.LocationException;
import org.mzd.shap.domain.Strand;
import org.mzd.shap.domain.StrandException;
import org.mzd.shap.io.ParserException;


/**
 * Parses the output generated by Metagene, creating a corresponding
 * list of {@link Feature}S.
 * <p>
 * As of 2/11/2007, Metagene output looks as such:
 * <p>
 * <pre>
 * # lcl|sequenceId|33|1106149303732 /type=BBAY01_scaffold
 * # gc = 0.321979
 * # bacteria
 * 1       152     +       2       13.2728 partial (lack 5'-end)
 * 237     1121    +       0       112.484 complete
 * 1160    1233    +       0       3.85211 partial (lack 3'-end)
 * </pre>
 * <p>
 * The columns being:
 * [start]	[stop]	[strand]	[extra 5']	[conf]	[partial]	[comment]
 * <p>
 * Metagene documentation calls the extra 5' column the frame, but its definition
 * is unlike the conventional definition, which it must be converted to.
 * <p>
 * As partial ORFs are also reported -- and these can be truncated at either the 
 * 3' or 5' end, we modify the reported start and end positions so that
 * the location covers a integer number of codons.
 * <p>
 * Previous verions of Metagene did not have a comment column and so we do not
 * attempt to use it in parsing.
 * 
 */
public class MetageneParser implements DetectorParser {
	private Log logger = LogFactory.getLog(getClass());

	protected Log getLogger() {
		return logger;
	}
	protected void setLogger(Log logger) {
		this.logger = logger;
	}

	public boolean supportsBatching() {
		return false;
	}
	
	public Map<String,Collection<Feature>> parse(File source) throws ParserException {
		
		BufferedReader reader = null;
		try {
			Map<String,Collection<Feature>> resultMap = new HashMap<String, Collection<Feature>>();
			Collection<Feature> features = new ArrayList<Feature>();
			resultMap.put("default", features);
			
			reader = new BufferedReader(new FileReader(source));
			while (true) {
				String line = reader.readLine();
				if (line == null) {
					break;
				}
				line = line.trim();
				if (line.length() <= 0 || line.startsWith("#")) {
					continue;
				}
				
				StringTokenizer st = new StringTokenizer(line);
				
				Integer start = new Integer(st.nextToken());
				Integer end = new Integer(st.nextToken());
				Strand strand = Strand.getInstance(st.nextToken());
				
				Integer extra5p = new Integer(st.nextToken());
								
				Integer frame = null;
				switch (strand) {
				case Forward:
					start += extra5p;
					frame = (start - 1) % 3;
					break;
				case Reverse:
					end -= extra5p;
					frame = (end + 1) % 3;
					break;
				}
				
				Double conf = new Double(st.nextToken());
				Boolean partial = st.nextToken().equals("partial");

				Location loc = new Location(start-1, end-1, strand, frame);
				
				int extra3p = loc.getExtraBases();
				if (extra3p > 0) {
					loc.adjust3PrimeEnd(-extra3p);
				}
				
				Feature f = Feature.newOpenReadingFrameFeature();
				f.setLocation(loc);
				f.setConfidence(conf);
				f.setPartial(partial);
				features.add(f);
			}
			
			return resultMap;
		}
		catch (StrandException ex) {
			getLogger().error(source,ex);
			throw new ParserException(ex);
		}
		catch (LocationException ex) {
			getLogger().error(source,ex);
			throw new ParserException(ex);
		}
		catch (IOException ex) {
			getLogger().error(source,ex);
			throw new ParserException(ex);
		}
		finally {
			if (reader != null) {
				try {
					reader.close();
				}
				catch (IOException ex) {
					getLogger().warn(ex);
				}
			}
		}
	}
}
