<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

<bean id="placeholderConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">    
	<property name="location" value="classpath:shap.properties"/>
</bean>
 
<!-- 
	This configuration is used only for mass-indexing.
	 
	We presently suffer from an unresolvable Lazy Initialization Exception when using
	automatic indexing on commit. Although sessions are not closed, Hibernate Search
	does not have access to the session. This might be resolved if all persist
	data access was moved to using EntityManager. 
-->

<bean id="hibernateProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
	<property name="properties">
		<props>
			<prop key="hibernate.hbm2ddl.auto">update</prop>
			<prop key="hibernate.show_sql">false</prop>
			<prop key="hibernate.jdbc.batch_size">20</prop>
			<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
			<prop key="hibernate.id.new_generator_mappings">true</prop>
			<prop key="hibernate.generate_statistics">true</prop> 
			<!-- Search --> 
			<prop key="hibernate.search.default.directory_provider">org.hibernate.search.store.FSDirectoryProvider</prop> 
			<prop key="hibernate.search.default.indexBase">${lucene.index}</prop>
			<prop key="hibernate.search.autoregister_listeners">true</prop>
			<!-- Second level cache -->
			<prop key="hibernate.cache.use_second_level_cache">false</prop>
    		<prop key="hibernate.cache.use_query_cache">false</prop>
    		<prop key="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.EhCacheRegionFactory</prop>
		</props>
	</property>
</bean>

<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
	<property name="dataSource" ref="dataSource"/>
	<property name="hibernateProperties"><ref local="hibernateProperties" /></property>
	<property name="annotatedClasses">
		<list>
			<value>org.mzd.shap.domain.authentication.User</value>
			<value>org.mzd.shap.domain.authentication.Role</value>
			<value>org.mzd.shap.domain.Project</value>
			<value>org.mzd.shap.domain.Sample</value>
			<value>org.mzd.shap.domain.Sequence</value>
			<value>org.mzd.shap.domain.Feature</value>
			<value>org.mzd.shap.domain.Annotation</value>
			<value>org.mzd.shap.domain.Alignment</value>
			<value>org.mzd.shap.domain.LargeString</value>
			<value>org.mzd.shap.analysis.SimpleAnnotator</value>
			<value>org.mzd.shap.analysis.SimpleDetector</value>
			<value>org.mzd.shap.analysis.SelfAnnotatingDetector</value>
			<value>org.mzd.shap.analysis.ImplicitAnnotator</value>
			<value>org.mzd.shap.spring.task.BaseTask</value>
			<value>org.mzd.shap.spring.task.AnnotationTask</value>
			<value>org.mzd.shap.spring.task.DetectionTask</value>
			<value>org.mzd.shap.spring.task.Job</value>
		</list>
	</property>
</bean>

</beans>
