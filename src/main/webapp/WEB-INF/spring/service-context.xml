<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

<bean id="consoleWriterObserver" class="org.mzd.shap.spring.cli.SimpleConsoleProgressObserver" scope="prototype"/>

<bean id="dataAdminService" class="org.mzd.shap.spring.DataAdminServiceImpl">
	<property name="projectDao" ref="projectDao"/>
	<property name="sampleDao" ref="sampleDao"/>
	<property name="sequenceDao" ref="sequenceDao"/>
	<property name="featureDao" ref="featureDao"/>
	<property name="annotationDao" ref="annotationDao"/>
	<property name="detectorDao" ref="detectorDao"/>
	<property name="annotatorDao" ref="annotatorDao"/>
	<property name="fullTextSearch" ref="fullTextSearch"/>
	<property name="observer" ref="consoleWriterObserver"/>
</bean>
<tx:advice id="dataAdminServiceAdvice" transaction-manager="txManager">
	<tx:attributes>
		<tx:method name="get*" read-only="true" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="ApplicationException"/>
		<tx:method name="*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="ApplicationException"/>
	</tx:attributes>
</tx:advice>
<aop:config>
	<aop:pointcut id="dataAdminServiceOperation" expression="execution(* org.mzd.shap.spring.DataAdminService.*(..))"/>
	<aop:advisor advice-ref="dataAdminServiceAdvice" pointcut-ref="dataAdminServiceOperation"/>
</aop:config>

<bean id="batchAdminService" class="org.mzd.shap.spring.BatchAdminServiceImpl">
	<property name="dataViewService" ref="dataAdminService"/>
	<property name="annotatorDao" ref="annotatorDao"/>
	<property name="detectorDao" ref="detectorDao"/>
	<property name="featureDao" ref="featureDao"/>
	<property name="sequenceDao" ref="sequenceDao"/>
	<property name="jobDao" ref="jobDao"/>
	<property name="taskDao" ref="taskDao"/>
	<property name="observer" ref="consoleWriterObserver"/>
</bean>
<tx:advice id="batchAdminServiceAdvice" transaction-manager="txManager">
	<tx:attributes>
		<tx:method name="count*" read-only="true" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="ApplicationException"/>
		<tx:method name="*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="ApplicationException"/>
	</tx:attributes>
</tx:advice>
<aop:config>
	<aop:pointcut id="batchAdminServiceOperation" expression="execution(* org.mzd.shap.spring.BatchAdminService.*(..))"/>
	<aop:advisor advice-ref="batchAdminServiceAdvice" pointcut-ref="batchAdminServiceOperation"/>
</aop:config>

<bean id="fastaWriterTarget" class="org.mzd.shap.spring.io.FastaWriterImpl">
	<property name="featureDao" ref="featureDao"/>
	<property name="sequenceDao" ref="sequenceDao"/>
	<property name="sampleDao" ref="sampleDao"/>
</bean>

<bean id="fastaWriter" class="org.springframework.aop.framework.ProxyFactoryBean">
	<property name="target"><ref local="fastaWriterTarget"/></property>
	<property name="proxyInterfaces">
		<value>org.mzd.shap.io.FastaWriter</value>
	</property>
	<property name="interceptorNames">
		<list>
			<value>hibernateInterceptor</value>
		</list>
	</property>
</bean>

<bean id="tableWriterTarget"  class="org.mzd.shap.spring.io.AnnotationTableWriter">
	<property name="sampleDao" ref="sampleDao"/>
	<property name="sequenceDao" ref="sequenceDao"/>
	<property name="featureDao" ref="featureDao"/>
	<property name="annotatorDao" ref="annotatorDao"/>
	<property name="annotationDao" ref="annotationDao"/>
</bean>

<bean id="tableWriter" class="org.springframework.aop.framework.ProxyFactoryBean">
	<property name="target"><ref local="tableWriterTarget"/></property>
	<property name="proxyInterfaces">
		<value>org.mzd.shap.io.TableWriter</value>
	</property>
	<property name="interceptorNames">
		<list>
			<value>hibernateInterceptor</value>
		</list>
	</property>
</bean>

<bean id="annotatorHistographicReportWriterTarget" class="org.mzd.shap.spring.io.AnnotatorHistographicReportWriter">
	<property name="sampleDao" ref="sampleDao"/>
	<property name="annotatorDao" ref="annotatorDao"/>
</bean>

<bean id="annotatorHistographicReportWriter" class="org.springframework.aop.framework.ProxyFactoryBean">
	<property name="target"><ref local="annotatorHistographicReportWriterTarget"/></property>
	<property name="proxyInterfaces">
		<value>org.mzd.shap.io.ReportWriter</value>
	</property>
	<property name="interceptorNames">
		<list>
			<value>hibernateInterceptor</value>
		</list>
	</property>
</bean>

<bean id="defaultBriefDescription"  class="org.mzd.shap.spring.io.DescriptionEditor">
	<property name="editPattern" value="^(.*)$"/>
</bean>

<bean id="genbankWriterTarget" class="org.mzd.shap.spring.io.GenbankWriterImpl">
	<property name="sequenceDao" ref="sequenceDao"/>
	<property name="featureDao" ref="featureDao"/>
	<property name="annotatorPrecendence">
		<list>
			<value>ncbi-nr</value>
			<value>swissprot</value>
			<value>tigrfam</value>
			<value>kegg-pep</value>
			<value>cog</value>
			<value>marker-gene</value>
		</list>
	</property>
	<property name="editors">
		<map>
			<entry key="swissprot">
				<bean  class="org.mzd.shap.spring.io.DescriptionEditor">
					<property name="editPattern" value="^(.*?)\s+-\s+.*$"/>
				</bean>
			</entry>
			<entry key="ncbi-nr">
				<bean  class="org.mzd.shap.spring.io.DescriptionEditor">
					<property name="editPattern" value="^(.*?) \[.*$"/>
				</bean>
			</entry>
		</map>
	</property>
</bean>

<bean id="genbankWriter" class="org.springframework.aop.framework.ProxyFactoryBean">
	<property name="target"><ref local="genbankWriterTarget"/></property>
	<property name="proxyInterfaces">
		<value>org.mzd.shap.io.GenbankWriter</value>
	</property>
	<property name="interceptorNames">
		<list>
			<value>hibernateInterceptor</value>
		</list>
	</property>
</bean>
	
</beans>
